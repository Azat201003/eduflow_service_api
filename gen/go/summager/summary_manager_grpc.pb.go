// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: summager/summary_manager.proto

package summager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SummaryManagerService_UploadSummary_FullMethodName   = "/summager.SummaryManagerService/UploadSummary"
	SummaryManagerService_DownloadSummary_FullMethodName = "/summager.SummaryManagerService/DownloadSummary"
)

// SummaryManagerServiceClient is the client API for SummaryManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryManagerServiceClient interface {
	UploadSummary(ctx context.Context, opts ...grpc.CallOption) (SummaryManagerService_UploadSummaryClient, error)
	DownloadSummary(ctx context.Context, in *SummaryReadRequest, opts ...grpc.CallOption) (SummaryManagerService_DownloadSummaryClient, error)
}

type summaryManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryManagerServiceClient(cc grpc.ClientConnInterface) SummaryManagerServiceClient {
	return &summaryManagerServiceClient{cc}
}

func (c *summaryManagerServiceClient) UploadSummary(ctx context.Context, opts ...grpc.CallOption) (SummaryManagerService_UploadSummaryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SummaryManagerService_ServiceDesc.Streams[0], SummaryManagerService_UploadSummary_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &summaryManagerServiceUploadSummaryClient{ClientStream: stream}
	return x, nil
}

type SummaryManagerService_UploadSummaryClient interface {
	Send(*SummarySendRequest) error
	CloseAndRecv() (*SummarySendResponse, error)
	grpc.ClientStream
}

type summaryManagerServiceUploadSummaryClient struct {
	grpc.ClientStream
}

func (x *summaryManagerServiceUploadSummaryClient) Send(m *SummarySendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *summaryManagerServiceUploadSummaryClient) CloseAndRecv() (*SummarySendResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SummarySendResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *summaryManagerServiceClient) DownloadSummary(ctx context.Context, in *SummaryReadRequest, opts ...grpc.CallOption) (SummaryManagerService_DownloadSummaryClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SummaryManagerService_ServiceDesc.Streams[1], SummaryManagerService_DownloadSummary_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &summaryManagerServiceDownloadSummaryClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryManagerService_DownloadSummaryClient interface {
	Recv() (*SummaryReadResponse, error)
	grpc.ClientStream
}

type summaryManagerServiceDownloadSummaryClient struct {
	grpc.ClientStream
}

func (x *summaryManagerServiceDownloadSummaryClient) Recv() (*SummaryReadResponse, error) {
	m := new(SummaryReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SummaryManagerServiceServer is the server API for SummaryManagerService service.
// All implementations must embed UnimplementedSummaryManagerServiceServer
// for forward compatibility
type SummaryManagerServiceServer interface {
	UploadSummary(SummaryManagerService_UploadSummaryServer) error
	DownloadSummary(*SummaryReadRequest, SummaryManagerService_DownloadSummaryServer) error
	mustEmbedUnimplementedSummaryManagerServiceServer()
}

// UnimplementedSummaryManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryManagerServiceServer struct {
}

func (UnimplementedSummaryManagerServiceServer) UploadSummary(SummaryManagerService_UploadSummaryServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadSummary not implemented")
}
func (UnimplementedSummaryManagerServiceServer) DownloadSummary(*SummaryReadRequest, SummaryManagerService_DownloadSummaryServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadSummary not implemented")
}
func (UnimplementedSummaryManagerServiceServer) mustEmbedUnimplementedSummaryManagerServiceServer() {}

// UnsafeSummaryManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryManagerServiceServer will
// result in compilation errors.
type UnsafeSummaryManagerServiceServer interface {
	mustEmbedUnimplementedSummaryManagerServiceServer()
}

func RegisterSummaryManagerServiceServer(s grpc.ServiceRegistrar, srv SummaryManagerServiceServer) {
	s.RegisterService(&SummaryManagerService_ServiceDesc, srv)
}

func _SummaryManagerService_UploadSummary_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SummaryManagerServiceServer).UploadSummary(&summaryManagerServiceUploadSummaryServer{ServerStream: stream})
}

type SummaryManagerService_UploadSummaryServer interface {
	SendAndClose(*SummarySendResponse) error
	Recv() (*SummarySendRequest, error)
	grpc.ServerStream
}

type summaryManagerServiceUploadSummaryServer struct {
	grpc.ServerStream
}

func (x *summaryManagerServiceUploadSummaryServer) SendAndClose(m *SummarySendResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *summaryManagerServiceUploadSummaryServer) Recv() (*SummarySendRequest, error) {
	m := new(SummarySendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SummaryManagerService_DownloadSummary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SummaryReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryManagerServiceServer).DownloadSummary(m, &summaryManagerServiceDownloadSummaryServer{ServerStream: stream})
}

type SummaryManagerService_DownloadSummaryServer interface {
	Send(*SummaryReadResponse) error
	grpc.ServerStream
}

type summaryManagerServiceDownloadSummaryServer struct {
	grpc.ServerStream
}

func (x *summaryManagerServiceDownloadSummaryServer) Send(m *SummaryReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SummaryManagerService_ServiceDesc is the grpc.ServiceDesc for SummaryManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "summager.SummaryManagerService",
	HandlerType: (*SummaryManagerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadSummary",
			Handler:       _SummaryManagerService_UploadSummary_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadSummary",
			Handler:       _SummaryManagerService_DownloadSummary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "summager/summary_manager.proto",
}
