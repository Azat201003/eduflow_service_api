// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: summager/summary_manager.proto

package summager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SummaryManagerService_StartSending_FullMethodName = "/summager.SummaryManagerService/StartSending"
	SummaryManagerService_SendChunk_FullMethodName    = "/summager.SummaryManagerService/SendChunk"
	SummaryManagerService_ReadChunk_FullMethodName    = "/summager.SummaryManagerService/ReadChunk"
	SummaryManagerService_CloseSending_FullMethodName = "/summager.SummaryManagerService/CloseSending"
	SummaryManagerService_StartReading_FullMethodName = "/summager.SummaryManagerService/StartReading"
)

// SummaryManagerServiceClient is the client API for SummaryManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryManagerServiceClient interface {
	StartSending(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	SendChunk(ctx context.Context, in *WriteChunk, opts ...grpc.CallOption) (*WriteResponse, error)
	ReadChunk(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*GetChunk, error)
	CloseSending(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error)
	StartReading(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
}

type summaryManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryManagerServiceClient(cc grpc.ClientConnInterface) SummaryManagerServiceClient {
	return &summaryManagerServiceClient{cc}
}

func (c *summaryManagerServiceClient) StartSending(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, SummaryManagerService_StartSending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryManagerServiceClient) SendChunk(ctx context.Context, in *WriteChunk, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, SummaryManagerService_SendChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryManagerServiceClient) ReadChunk(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*GetChunk, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChunk)
	err := c.cc.Invoke(ctx, SummaryManagerService_ReadChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryManagerServiceClient) CloseSending(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndResponse)
	err := c.cc.Invoke(ctx, SummaryManagerService_CloseSending_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryManagerServiceClient) StartReading(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, SummaryManagerService_StartReading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryManagerServiceServer is the server API for SummaryManagerService service.
// All implementations must embed UnimplementedSummaryManagerServiceServer
// for forward compatibility
type SummaryManagerServiceServer interface {
	StartSending(context.Context, *StartRequest) (*StartResponse, error)
	SendChunk(context.Context, *WriteChunk) (*WriteResponse, error)
	ReadChunk(context.Context, *ReadRequest) (*GetChunk, error)
	CloseSending(context.Context, *EndRequest) (*EndResponse, error)
	StartReading(context.Context, *StartRequest) (*StartResponse, error)
	mustEmbedUnimplementedSummaryManagerServiceServer()
}

// UnimplementedSummaryManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryManagerServiceServer struct {
}

func (UnimplementedSummaryManagerServiceServer) StartSending(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSending not implemented")
}
func (UnimplementedSummaryManagerServiceServer) SendChunk(context.Context, *WriteChunk) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChunk not implemented")
}
func (UnimplementedSummaryManagerServiceServer) ReadChunk(context.Context, *ReadRequest) (*GetChunk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChunk not implemented")
}
func (UnimplementedSummaryManagerServiceServer) CloseSending(context.Context, *EndRequest) (*EndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSending not implemented")
}
func (UnimplementedSummaryManagerServiceServer) StartReading(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReading not implemented")
}
func (UnimplementedSummaryManagerServiceServer) mustEmbedUnimplementedSummaryManagerServiceServer() {}

// UnsafeSummaryManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryManagerServiceServer will
// result in compilation errors.
type UnsafeSummaryManagerServiceServer interface {
	mustEmbedUnimplementedSummaryManagerServiceServer()
}

func RegisterSummaryManagerServiceServer(s grpc.ServiceRegistrar, srv SummaryManagerServiceServer) {
	s.RegisterService(&SummaryManagerService_ServiceDesc, srv)
}

func _SummaryManagerService_StartSending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryManagerServiceServer).StartSending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryManagerService_StartSending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryManagerServiceServer).StartSending(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryManagerService_SendChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteChunk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryManagerServiceServer).SendChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryManagerService_SendChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryManagerServiceServer).SendChunk(ctx, req.(*WriteChunk))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryManagerService_ReadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryManagerServiceServer).ReadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryManagerService_ReadChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryManagerServiceServer).ReadChunk(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryManagerService_CloseSending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryManagerServiceServer).CloseSending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryManagerService_CloseSending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryManagerServiceServer).CloseSending(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryManagerService_StartReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryManagerServiceServer).StartReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryManagerService_StartReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryManagerServiceServer).StartReading(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryManagerService_ServiceDesc is the grpc.ServiceDesc for SummaryManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "summager.SummaryManagerService",
	HandlerType: (*SummaryManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartSending",
			Handler:    _SummaryManagerService_StartSending_Handler,
		},
		{
			MethodName: "SendChunk",
			Handler:    _SummaryManagerService_SendChunk_Handler,
		},
		{
			MethodName: "ReadChunk",
			Handler:    _SummaryManagerService_ReadChunk_Handler,
		},
		{
			MethodName: "CloseSending",
			Handler:    _SummaryManagerService_CloseSending_Handler,
		},
		{
			MethodName: "StartReading",
			Handler:    _SummaryManagerService_StartReading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "summager/summary_manager.proto",
}
