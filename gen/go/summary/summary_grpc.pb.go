// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.30.2
// source: summary/summary.proto

package summary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SummaryService_GetSummaryById_FullMethodName       = "/summary.SummaryService/GetSummaryById"
	SummaryService_GetFilteredSummaries_FullMethodName = "/summary.SummaryService/GetFilteredSummaries"
	SummaryService_CreateSummary_FullMethodName        = "/summary.SummaryService/CreateSummary"
	SummaryService_DeleteSummary_FullMethodName        = "/summary.SummaryService/DeleteSummary"
	SummaryService_UpdateSummary_FullMethodName        = "/summary.SummaryService/UpdateSummary"
)

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryServiceClient interface {
	GetSummaryById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Summary, error)
	GetFilteredSummaries(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (SummaryService_GetFilteredSummariesClient, error)
	CreateSummary(ctx context.Context, in *CreateSummaryRequest, opts ...grpc.CallOption) (*Id, error)
	DeleteSummary(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Summary, error)
	UpdateSummary(ctx context.Context, in *Summary, opts ...grpc.CallOption) (*Summary, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) GetSummaryById(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Summary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Summary)
	err := c.cc.Invoke(ctx, SummaryService_GetSummaryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) GetFilteredSummaries(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (SummaryService_GetFilteredSummariesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SummaryService_ServiceDesc.Streams[0], SummaryService_GetFilteredSummaries_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &summaryServiceGetFilteredSummariesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SummaryService_GetFilteredSummariesClient interface {
	Recv() (*Summary, error)
	grpc.ClientStream
}

type summaryServiceGetFilteredSummariesClient struct {
	grpc.ClientStream
}

func (x *summaryServiceGetFilteredSummariesClient) Recv() (*Summary, error) {
	m := new(Summary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *summaryServiceClient) CreateSummary(ctx context.Context, in *CreateSummaryRequest, opts ...grpc.CallOption) (*Id, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Id)
	err := c.cc.Invoke(ctx, SummaryService_CreateSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) DeleteSummary(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Summary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Summary)
	err := c.cc.Invoke(ctx, SummaryService_DeleteSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) UpdateSummary(ctx context.Context, in *Summary, opts ...grpc.CallOption) (*Summary, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Summary)
	err := c.cc.Invoke(ctx, SummaryService_UpdateSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations must embed UnimplementedSummaryServiceServer
// for forward compatibility
type SummaryServiceServer interface {
	GetSummaryById(context.Context, *Id) (*Summary, error)
	GetFilteredSummaries(*FilterRequest, SummaryService_GetFilteredSummariesServer) error
	CreateSummary(context.Context, *CreateSummaryRequest) (*Id, error)
	DeleteSummary(context.Context, *Id) (*Summary, error)
	UpdateSummary(context.Context, *Summary) (*Summary, error)
	mustEmbedUnimplementedSummaryServiceServer()
}

// UnimplementedSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (UnimplementedSummaryServiceServer) GetSummaryById(context.Context, *Id) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryById not implemented")
}
func (UnimplementedSummaryServiceServer) GetFilteredSummaries(*FilterRequest, SummaryService_GetFilteredSummariesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFilteredSummaries not implemented")
}
func (UnimplementedSummaryServiceServer) CreateSummary(context.Context, *CreateSummaryRequest) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSummary not implemented")
}
func (UnimplementedSummaryServiceServer) DeleteSummary(context.Context, *Id) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSummary not implemented")
}
func (UnimplementedSummaryServiceServer) UpdateSummary(context.Context, *Summary) (*Summary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSummary not implemented")
}
func (UnimplementedSummaryServiceServer) mustEmbedUnimplementedSummaryServiceServer() {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_GetSummaryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetSummaryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_GetSummaryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetSummaryById(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_GetFilteredSummaries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SummaryServiceServer).GetFilteredSummaries(m, &summaryServiceGetFilteredSummariesServer{ServerStream: stream})
}

type SummaryService_GetFilteredSummariesServer interface {
	Send(*Summary) error
	grpc.ServerStream
}

type summaryServiceGetFilteredSummariesServer struct {
	grpc.ServerStream
}

func (x *summaryServiceGetFilteredSummariesServer) Send(m *Summary) error {
	return x.ServerStream.SendMsg(m)
}

func _SummaryService_CreateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).CreateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_CreateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).CreateSummary(ctx, req.(*CreateSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_DeleteSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_DeleteSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).DeleteSummary(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_UpdateSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Summary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).UpdateSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_UpdateSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).UpdateSummary(ctx, req.(*Summary))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "summary.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummaryById",
			Handler:    _SummaryService_GetSummaryById_Handler,
		},
		{
			MethodName: "CreateSummary",
			Handler:    _SummaryService_CreateSummary_Handler,
		},
		{
			MethodName: "DeleteSummary",
			Handler:    _SummaryService_DeleteSummary_Handler,
		},
		{
			MethodName: "UpdateSummary",
			Handler:    _SummaryService_UpdateSummary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFilteredSummaries",
			Handler:       _SummaryService_GetFilteredSummaries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "summary/summary.proto",
}
